{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3","program":"C:\\Users\\domen\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","shared_mutex","C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=acc2ed59210790f5","-C","extra-filename=-acc2ed59210790f5","--out-dir","c:\\Users\\domen\\Desktop\\robe università\\rust\\multithread_example\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\domen\\Desktop\\robe università\\rust\\multithread_example\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\domen\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\domen\\Desktop\\robe università\\rust\\multithread_example\\target\\rls\\debug\\deps\\libshared_mutex-acc2ed59210790f5.rmeta"},"prelude":{"crate_id":{"name":"shared_mutex","disambiguator":[8904872798731702434,0]},"crate_root":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src","external_crates":[{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[13015713666403456114,0]}},{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[1507510987272037120,0]}},{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3803325750332457499,0]}},{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4223354511651166533,0]}},{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[15700094508901508366,0]}},{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[12632183332710247155,0]}},{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[18262169243471273054,0]}},{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15664785966706829415,0]}},{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[3895343934390880989,0]}},{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1841993658411810574,0]}},{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","num":11,"id":{"name":"adler","disambiguator":[1117248029108287081,0]}},{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[14646112292732085519,0]}},{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[11979428506951486581,0]}},{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[2104796995944127881,0]}},{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[4084207378877276393,0]}}],"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":0,"byte_end":20458,"line_start":1,"line_end":665,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":217},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":388,"byte_end":402,"line_start":18,"line_end":18,"column_start":14,"column_end":28},"alias_span":null,"name":"RawSharedMutex","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":0,"byte_end":20458,"line_start":1,"line_end":665,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":89},{"krate":0,"index":206},{"krate":0,"index":250},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":258},{"krate":0,"index":262},{"krate":0,"index":270},{"krate":0,"index":275},{"krate":0,"index":278},{"krate":0,"index":281},{"krate":0,"index":286},{"krate":0,"index":291},{"krate":0,"index":296},{"krate":0,"index":300},{"krate":0,"index":305},{"krate":0,"index":310},{"krate":0,"index":316},{"krate":0,"index":322},{"krate":0,"index":326},{"krate":0,"index":330},{"krate":0,"index":335},{"krate":0,"index":341},{"krate":0,"index":358},{"krate":0,"index":375},{"krate":0,"index":380},{"krate":0,"index":385},{"krate":0,"index":389},{"krate":0,"index":393},{"krate":0,"index":397},{"krate":0,"index":400},{"krate":0,"index":404},{"krate":0,"index":408},{"krate":0,"index":412}],"decl_id":null,"docs":" # shared-mutex","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":35,"byte_end":57,"line_start":2,"line_end":2,"column_start":1,"column_end":23}},{"value":"/ # shared-mutex","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":59,"byte_end":77,"line_start":4,"line_end":4,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":78,"byte_end":81,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ A RwLock that can be used with a Condvar.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":82,"byte_end":127,"line_start":6,"line_end":6,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":49},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"poison","qualname":"::poison","value":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":57},{"krate":0,"index":416},{"krate":0,"index":420},{"krate":0,"index":423},{"krate":0,"index":428},{"krate":0,"index":60},{"krate":0,"index":65},{"krate":0,"index":71},{"krate":0,"index":432},{"krate":0,"index":434},{"krate":0,"index":436},{"krate":0,"index":440},{"krate":0,"index":78},{"krate":0,"index":82},{"krate":0,"index":85}],"decl_id":null,"docs":" Provides ergonomic poisoning primitives for building poisonable structures.\n","sig":null,"attributes":[{"value":"/ Provides ergonomic poisoning primitives for building poisonable structures.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":20461,"byte_end":20540,"line_start":1,"line_end":1,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":416},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":20732,"byte_end":20738,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"name":"Poison","qualname":"::poison::Poison","value":"Poison {  }","parent":null,"children":[{"krate":0,"index":418},{"krate":0,"index":419}],"decl_id":null,"docs":" A typed poisoning wrapper.","sig":null,"attributes":[{"value":"/ A typed poisoning wrapper.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":20602,"byte_end":20632,"line_start":6,"line_end":6,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":20633,"byte_end":20636,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Enforces that access to the contained data respects poisoning.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":20637,"byte_end":20703,"line_start":8,"line_end":8,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":423},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":20992,"byte_end":21003,"line_start":20,"line_end":20,"column_start":12,"column_end":23},"name":"PoisonGuard","qualname":"::poison::PoisonGuard","value":"PoisonGuard {  }","parent":null,"children":[{"krate":0,"index":426},{"krate":0,"index":427}],"decl_id":null,"docs":" A poison guard on an associated Poison.","sig":null,"attributes":[{"value":"/ A poison guard on an associated Poison.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":20787,"byte_end":20830,"line_start":15,"line_end":15,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":20831,"byte_end":20834,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ If the current thread panics before this instance is dropped, the","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":20835,"byte_end":20904,"line_start":17,"line_end":17,"column_start":1,"column_end":70}},{"value":"/ Poision will become poisoned when this instance drops.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":20905,"byte_end":20963,"line_start":18,"line_end":18,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":21200,"byte_end":21203,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"new","qualname":"<Poison<T>>::new","value":"pub fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new Poison in the non-poisoned state.\n","sig":null,"attributes":[{"value":"/ Create a new Poison in the non-poisoned state.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":21124,"byte_end":21174,"line_start":26,"line_end":26,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":21179,"byte_end":21188,"line_start":27,"line_end":27,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":21393,"byte_end":21401,"line_start":37,"line_end":37,"column_start":12,"column_end":20},"name":"poisoned","qualname":"<Poison<T>>::poisoned","value":"pub fn poisoned(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new Poison that is already poisoned.\n","sig":null,"attributes":[{"value":"/ Create a new Poison that is already poisoned.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":21318,"byte_end":21367,"line_start":35,"line_end":35,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":21372,"byte_end":21381,"line_start":36,"line_end":36,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":21647,"byte_end":21657,"line_start":48,"line_end":48,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Poison<T>>::into_inner","value":"pub fn into_inner(Self) -> LockResult<T>","parent":null,"children":[],"decl_id":null,"docs":" Extract the data from the Poison.","sig":null,"attributes":[{"value":"/ Extract the data from the Poison.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":21521,"byte_end":21558,"line_start":44,"line_end":44,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":21563,"byte_end":21566,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ Returns PoisonError if the Poison is poisoned.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":21571,"byte_end":21621,"line_start":46,"line_end":46,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":21626,"byte_end":21635,"line_start":47,"line_end":47,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":21979,"byte_end":21983,"line_start":62,"line_end":62,"column_start":12,"column_end":16},"name":"lock","qualname":"<Poison<T>>::lock","value":"pub fn lock(&mut Self) -> LockResult<PoisonGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Get a poison lock on this poison.","sig":null,"attributes":[{"value":"/ Get a poison lock on this poison.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":21853,"byte_end":21890,"line_start":58,"line_end":58,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":21895,"byte_end":21898,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ Returns PoisonError if the Poison is poisoned.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":21903,"byte_end":21953,"line_start":60,"line_end":60,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":21958,"byte_end":21967,"line_start":61,"line_end":61,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":22410,"byte_end":22413,"line_start":72,"line_end":72,"column_start":12,"column_end":15},"name":"get","qualname":"<Poison<T>>::get","value":"pub fn get(&Self) -> LockResult<&T>","parent":null,"children":[],"decl_id":null,"docs":" Get an immutable reference to the data in this poison.","sig":null,"attributes":[{"value":"/ Get an immutable reference to the data in this poison.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":22162,"byte_end":22220,"line_start":67,"line_end":67,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":22225,"byte_end":22228,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ There is no guard for an immutable reference, since the data must either","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":22233,"byte_end":22309,"line_start":69,"line_end":69,"column_start":5,"column_end":81}},{"value":"/ be immutable or internally poisoned if it has interior mutability.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":22314,"byte_end":22384,"line_start":70,"line_end":70,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":22389,"byte_end":22398,"line_start":71,"line_end":71,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":22725,"byte_end":22732,"line_start":83,"line_end":83,"column_start":19,"column_end":26},"name":"get_mut","qualname":"<Poison<T>>::get_mut","value":"pub unsafe fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference without a guard.","sig":null,"attributes":[{"value":"/ Get a mutable reference without a guard.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":22583,"byte_end":22627,"line_start":80,"line_end":80,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":22632,"byte_end":22635,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ Should only be used in combination with PoisonGuard::into_raw.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":22640,"byte_end":22706,"line_start":82,"line_end":82,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":22886,"byte_end":22889,"line_start":88,"line_end":88,"column_start":12,"column_end":15},"name":"get","qualname":"<PoisonGuard>::get","value":"pub fn get(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Get an immutable reference to the data.\n","sig":null,"attributes":[{"value":"/ Get an immutable reference to the data.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":22831,"byte_end":22874,"line_start":87,"line_end":87,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":22975,"byte_end":22982,"line_start":91,"line_end":91,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<PoisonGuard>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the data.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the data.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":22923,"byte_end":22963,"line_start":90,"line_end":90,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":23167,"byte_end":23175,"line_start":96,"line_end":96,"column_start":19,"column_end":27},"name":"into_mut","qualname":"<PoisonGuard>::into_mut","value":"pub unsafe fn into_mut(Self) -> &'poison mut T","parent":null,"children":[],"decl_id":null,"docs":" Get a reference that escapes the guard.","sig":null,"attributes":[{"value":"/ Get a reference that escapes the guard.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":23028,"byte_end":23071,"line_start":93,"line_end":93,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":23076,"byte_end":23079,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ Should only be used if the data will be externally poisoned.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":23084,"byte_end":23148,"line_start":95,"line_end":95,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":23260,"byte_end":23268,"line_start":99,"line_end":99,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<PoisonGuard>::into_raw","value":"pub fn into_raw(Self) -> RawPoisonGuard","parent":null,"children":[],"decl_id":null,"docs":" Get the raw poison guard.\n","sig":null,"attributes":[{"value":"/ Get the raw poison guard.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":23219,"byte_end":23248,"line_start":98,"line_end":98,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":432},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":23436,"byte_end":23445,"line_start":104,"line_end":104,"column_start":12,"column_end":21},"name":"RawPoison","qualname":"::poison::RawPoison","value":"RawPoison {  }","parent":null,"children":[{"krate":0,"index":433}],"decl_id":null,"docs":" A raw poisoning primitive, can be used to build automatically poisoning structures.\n","sig":null,"attributes":[{"value":"/ A raw poisoning primitive, can be used to build automatically poisoning structures.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":23320,"byte_end":23407,"line_start":102,"line_end":102,"column_start":1,"column_end":88}}]},{"kind":"Struct","id":{"krate":0,"index":436},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":23661,"byte_end":23675,"line_start":113,"line_end":113,"column_start":12,"column_end":26},"name":"RawPoisonGuard","qualname":"::poison::RawPoisonGuard","value":"RawPoisonGuard {  }","parent":null,"children":[{"krate":0,"index":438},{"krate":0,"index":439}],"decl_id":null,"docs":" A guard on a RawPoison.","sig":null,"attributes":[{"value":"/ A guard on a RawPoison.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":23470,"byte_end":23497,"line_start":108,"line_end":108,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":23498,"byte_end":23501,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ If the current thread panics before this instance is dropped, the RawPoison","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":23502,"byte_end":23581,"line_start":110,"line_end":110,"column_start":1,"column_end":80}},{"value":"/ will become poisoned when this instance drops.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":23582,"byte_end":23632,"line_start":111,"line_end":111,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":23844,"byte_end":23847,"line_start":121,"line_end":121,"column_start":12,"column_end":15},"name":"new","qualname":"<RawPoison>::new","value":"pub fn new() -> RawPoison","parent":null,"children":[],"decl_id":null,"docs":" Create a new RawPoison in a non-poisoned state.\n","sig":null,"attributes":[{"value":"/ Create a new RawPoison in a non-poisoned state.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":23767,"byte_end":23818,"line_start":119,"line_end":119,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":23823,"byte_end":23832,"line_start":120,"line_end":120,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":23993,"byte_end":24001,"line_start":127,"line_end":127,"column_start":12,"column_end":20},"name":"poisoned","qualname":"<RawPoison>::poisoned","value":"pub fn poisoned() -> RawPoison","parent":null,"children":[],"decl_id":null,"docs":" Create a new RawPoison which is already poisoned.\n","sig":null,"attributes":[{"value":"/ Create a new RawPoison which is already poisoned.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":23914,"byte_end":23967,"line_start":125,"line_end":125,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":23972,"byte_end":23981,"line_start":126,"line_end":126,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":24208,"byte_end":24212,"line_start":135,"line_end":135,"column_start":12,"column_end":16},"name":"lock","qualname":"<RawPoison>::lock","value":"pub fn lock(&mut Self) -> LockResult<RawPoisonGuard>","parent":null,"children":[],"decl_id":null,"docs":" Get a poison lock on this RawPoison.","sig":null,"attributes":[{"value":"/ Get a poison lock on this RawPoison.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":24067,"byte_end":24107,"line_start":131,"line_end":131,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":24112,"byte_end":24115,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ If the RawPoison is already poisoned, returns PoisonError.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":24120,"byte_end":24182,"line_start":133,"line_end":133,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":24187,"byte_end":24196,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":85},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":24953,"byte_end":24963,"line_start":165,"line_end":165,"column_start":8,"column_end":18},"name":"map_result","qualname":"::poison::map_result","value":"pub fn map_result<T, U, F>(LockResult<T>, F) -> LockResult<U> where\nF: FnOnce(T) -> U","parent":null,"children":[],"decl_id":null,"docs":" A simple, useful combinator for dealing with LockResult.","sig":null,"attributes":[{"value":"/ A simple, useful combinator for dealing with LockResult.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":24734,"byte_end":24794,"line_start":160,"line_end":160,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":24795,"byte_end":24798,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ Applies the action to either the Ok or Err variants","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":24799,"byte_end":24854,"line_start":162,"line_end":162,"column_start":1,"column_end":56}},{"value":"/ of the LockResult and returns a new LockResult in the same","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":24855,"byte_end":24917,"line_start":163,"line_end":163,"column_start":1,"column_end":63}},{"value":"/ state with a new value.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":24918,"byte_end":24945,"line_start":164,"line_end":164,"column_start":1,"column_end":28}}]},{"kind":"Mod","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"monitor","qualname":"::monitor","value":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","parent":null,"children":[{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":94},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":101},{"krate":0,"index":104},{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":114},{"krate":0,"index":117},{"krate":0,"index":120},{"krate":0,"index":124},{"krate":0,"index":129},{"krate":0,"index":134},{"krate":0,"index":137},{"krate":0,"index":146},{"krate":0,"index":155},{"krate":0,"index":164},{"krate":0,"index":169},{"krate":0,"index":174},{"krate":0,"index":178},{"krate":0,"index":182},{"krate":0,"index":186},{"krate":0,"index":189},{"krate":0,"index":192},{"krate":0,"index":195},{"krate":0,"index":198},{"krate":0,"index":202}],"decl_id":null,"docs":" A monitor convenience type that couples a SharedMutex and a Condvar.","sig":null,"attributes":[{"value":"/ A monitor convenience type that couples a SharedMutex and a Condvar.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":25213,"byte_end":25285,"line_start":1,"line_end":1,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":25286,"byte_end":25289,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This type is more convenient to use but a little bit less general than","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":25290,"byte_end":25364,"line_start":3,"line_end":3,"column_start":1,"column_end":75}},{"value":"/ SharedMutex since the monitor uses only one condition variable, whereas","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":25365,"byte_end":25440,"line_start":4,"line_end":4,"column_start":1,"column_end":76}},{"value":"/ a SharedMutex can be used with any number of condition variables.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":25441,"byte_end":25510,"line_start":5,"line_end":5,"column_start":1,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":120},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":25859,"byte_end":25866,"line_start":18,"line_end":18,"column_start":12,"column_end":19},"name":"Monitor","qualname":"::monitor::Monitor","value":"Monitor {  }","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":123}],"decl_id":null,"docs":" A convenience wrapper around a SharedMutex and a Condvar.","sig":null,"attributes":[{"value":"/ A convenience wrapper around a SharedMutex and a Condvar.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":25675,"byte_end":25736,"line_start":14,"line_end":14,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":25737,"byte_end":25740,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Provides an ergonomic API for locking and waiting on predicates","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":25741,"byte_end":25808,"line_start":16,"line_end":16,"column_start":1,"column_end":68}},{"value":"/ associated with the internal data.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":25809,"byte_end":25847,"line_start":17,"line_end":17,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":124},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":25989,"byte_end":26005,"line_start":24,"line_end":24,"column_start":12,"column_end":28},"name":"MonitorReadGuard","qualname":"::monitor::MonitorReadGuard","value":"MonitorReadGuard {  }","parent":null,"children":[{"krate":0,"index":127},{"krate":0,"index":128}],"decl_id":null,"docs":" A shared read guard to the data in a Monitor.\n","sig":null,"attributes":[{"value":"/ A shared read guard to the data in a Monitor.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":25928,"byte_end":25977,"line_start":23,"line_end":23,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":129},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":26175,"byte_end":26192,"line_start":30,"line_end":30,"column_start":12,"column_end":29},"name":"MonitorWriteGuard","qualname":"::monitor::MonitorWriteGuard","value":"MonitorWriteGuard {  }","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":133}],"decl_id":null,"docs":" An exclusive write guard to the data in a Monitor.\n","sig":null,"attributes":[{"value":"/ An exclusive write guard to the data in a Monitor.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":26109,"byte_end":26163,"line_start":29,"line_end":29,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":26359,"byte_end":26362,"line_start":37,"line_end":37,"column_start":12,"column_end":15},"name":"new","qualname":"<Monitor<T>>::new","value":"pub fn new(T) -> Monitor<T>","parent":null,"children":[],"decl_id":null,"docs":" Create a new Monitor.\n","sig":null,"attributes":[{"value":"/ Create a new Monitor.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":26322,"byte_end":26347,"line_start":36,"line_end":36,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":26590,"byte_end":26594,"line_start":47,"line_end":47,"column_start":12,"column_end":16},"name":"read","qualname":"<Monitor<T>>::read","value":"pub fn read(&Self) -> LockResult<MonitorReadGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Acquire a shared read lock on the monitor.\n","sig":null,"attributes":[{"value":"/ Acquire a shared read lock on the monitor.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":26532,"byte_end":26578,"line_start":46,"line_end":46,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":26888,"byte_end":26893,"line_start":57,"line_end":57,"column_start":12,"column_end":17},"name":"write","qualname":"<Monitor<T>>::write","value":"pub fn write(&Self) -> LockResult<MonitorWriteGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Acquire an exclusive write lock on the monitor.\n","sig":null,"attributes":[{"value":"/ Acquire an exclusive write lock on the monitor.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":26825,"byte_end":26876,"line_start":56,"line_end":56,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":27440,"byte_end":27450,"line_start":72,"line_end":72,"column_start":12,"column_end":22},"name":"notify_one","qualname":"<Monitor<T>>::notify_one","value":"pub fn notify_one(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Notify one thread which is waiting on the monitor.","sig":null,"attributes":[{"value":"/ Notify one thread which is waiting on the monitor.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":27127,"byte_end":27181,"line_start":66,"line_end":66,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":27186,"byte_end":27189,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ Note that it is safe but often incorrect to notify without holding any","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":27194,"byte_end":27268,"line_start":68,"line_end":68,"column_start":5,"column_end":79}},{"value":"/ lock on the monitor, since the predicate may change between a","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":27273,"byte_end":27338,"line_start":69,"line_end":69,"column_start":5,"column_end":70}},{"value":"/ notification and a predicate check, potentially causing a deadlock.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":27343,"byte_end":27414,"line_start":70,"line_end":70,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":27419,"byte_end":27428,"line_start":71,"line_end":71,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":27805,"byte_end":27815,"line_start":80,"line_end":80,"column_start":12,"column_end":22},"name":"notify_all","qualname":"<Monitor<T>>::notify_all","value":"pub fn notify_all(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Notify all threads which are waiting on the monitor.","sig":null,"attributes":[{"value":"/ Notify all threads which are waiting on the monitor.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":27490,"byte_end":27546,"line_start":74,"line_end":74,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":27551,"byte_end":27554,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ Note that it is safe but often incorrect to notify without holding any","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":27559,"byte_end":27633,"line_start":76,"line_end":76,"column_start":5,"column_end":79}},{"value":"/ lock on the monitor, since the predicate may change between a","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":27638,"byte_end":27703,"line_start":77,"line_end":77,"column_start":5,"column_end":70}},{"value":"/ notification and a predicate check, potentially causing a deadlock.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":27708,"byte_end":27779,"line_start":78,"line_end":78,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":27784,"byte_end":27793,"line_start":79,"line_end":79,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":27960,"byte_end":27964,"line_start":84,"line_end":84,"column_start":12,"column_end":16},"name":"cond","qualname":"<Monitor<T>>::cond","value":"pub fn cond(&Self) -> &Condvar","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the condition variable in this Monitor for external use.\n","sig":null,"attributes":[{"value":"/ Get a reference to the condition variable in this Monitor for external use.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":27855,"byte_end":27934,"line_start":82,"line_end":82,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":27939,"byte_end":27948,"line_start":83,"line_end":83,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":28152,"byte_end":28165,"line_start":89,"line_end":89,"column_start":12,"column_end":25},"name":"wait_for_read","qualname":"<MonitorReadGuard>::wait_for_read","value":"pub fn wait_for_read(Self) -> LockResult<Self>","parent":null,"children":[],"decl_id":null,"docs":" Wait for a notification on the monitor, then resume with another read guard.\n","sig":null,"attributes":[{"value":"/ Wait for a notification on the monitor, then resume with another read guard.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":28060,"byte_end":28140,"line_start":88,"line_end":88,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":28522,"byte_end":28536,"line_start":100,"line_end":100,"column_start":12,"column_end":26},"name":"wait_for_write","qualname":"<MonitorReadGuard>::wait_for_write","value":"pub fn wait_for_write(Self) -> LockResult<MonitorWriteGuard>","parent":null,"children":[],"decl_id":null,"docs":" Wait for a notification on the monitor, then resume with a write guard.\n","sig":null,"attributes":[{"value":"/ Wait for a notification on the monitor, then resume with a write guard.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":28435,"byte_end":28510,"line_start":99,"line_end":99,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":28887,"byte_end":28897,"line_start":111,"line_end":111,"column_start":12,"column_end":22},"name":"notify_one","qualname":"<MonitorReadGuard>::notify_one","value":"pub fn notify_one(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Notify a thread waiting on the monitor.\n","sig":null,"attributes":[{"value":"/ Notify a thread waiting on the monitor.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":28832,"byte_end":28875,"line_start":110,"line_end":110,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":28995,"byte_end":29005,"line_start":114,"line_end":114,"column_start":12,"column_end":22},"name":"notify_all","qualname":"<MonitorReadGuard>::notify_all","value":"pub fn notify_all(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Notify all threads waiting on the monitor.\n","sig":null,"attributes":[{"value":"/ Notify all threads waiting on the monitor.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":28937,"byte_end":28983,"line_start":113,"line_end":113,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":29194,"byte_end":29207,"line_start":119,"line_end":119,"column_start":12,"column_end":25},"name":"wait_for_read","qualname":"<MonitorWriteGuard>::wait_for_read","value":"pub fn wait_for_read(Self) -> LockResult<MonitorReadGuard>","parent":null,"children":[],"decl_id":null,"docs":" Wait for a notification on the monitor, then resume with another read guard.\n","sig":null,"attributes":[{"value":"/ Wait for a notification on the monitor, then resume with another read guard.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":29102,"byte_end":29182,"line_start":118,"line_end":118,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":29593,"byte_end":29607,"line_start":130,"line_end":130,"column_start":12,"column_end":26},"name":"wait_for_write","qualname":"<MonitorWriteGuard>::wait_for_write","value":"pub fn wait_for_write(Self) -> LockResult<Self>","parent":null,"children":[],"decl_id":null,"docs":" Wait for a notification on the monitor, then resume with another write guard.\n","sig":null,"attributes":[{"value":"/ Wait for a notification on the monitor, then resume with another write guard.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":29500,"byte_end":29581,"line_start":129,"line_end":129,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":29934,"byte_end":29944,"line_start":141,"line_end":141,"column_start":12,"column_end":22},"name":"notify_one","qualname":"<MonitorWriteGuard>::notify_one","value":"pub fn notify_one(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Notify a thread waiting on the monitor.\n","sig":null,"attributes":[{"value":"/ Notify a thread waiting on the monitor.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":29879,"byte_end":29922,"line_start":140,"line_end":140,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":30042,"byte_end":30052,"line_start":144,"line_end":144,"column_start":12,"column_end":22},"name":"notify_all","qualname":"<MonitorWriteGuard>::notify_all","value":"pub fn notify_all(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Notify all threads waiting on the monitor.\n","sig":null,"attributes":[{"value":"/ Notify all threads waiting on the monitor.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":29984,"byte_end":30030,"line_start":143,"line_end":143,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":217},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":32299,"byte_end":32313,"line_start":8,"line_end":8,"column_start":12,"column_end":26},"name":"RawSharedMutex","qualname":"::raw::RawSharedMutex","value":"RawSharedMutex {  }","parent":null,"children":[{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220}],"decl_id":null,"docs":" A raw lock providing both shared read locks and exclusive write locks.","sig":null,"attributes":[{"value":"/ A raw lock providing both shared read locks and exclusive write locks.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":32035,"byte_end":32109,"line_start":3,"line_end":3,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":32110,"byte_end":32113,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Used as a raw building block for other synchronization primitives. Most","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":32114,"byte_end":32189,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"/ users should just use `SharedMutex<T>`, which takes care of tieing the lock","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":32190,"byte_end":32269,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ to some data.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":32270,"byte_end":32287,"line_start":7,"line_end":7,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":32468,"byte_end":32471,"line_start":17,"line_end":17,"column_start":12,"column_end":15},"name":"new","qualname":"<RawSharedMutex>::new","value":"pub fn new() -> RawSharedMutex","parent":null,"children":[],"decl_id":null,"docs":" Create a new RawSharedMutex\n","sig":null,"attributes":[{"value":"/ Create a new RawSharedMutex","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":32411,"byte_end":32442,"line_start":15,"line_end":15,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":32447,"byte_end":32456,"line_start":16,"line_end":16,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":32867,"byte_end":32869,"line_start":30,"line_end":30,"column_start":12,"column_end":14},"name":"is","qualname":"<RawSharedMutex>::is","value":"pub fn is(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if this mutex and the other are the same mutex.","sig":null,"attributes":[{"value":"/ Checks if this mutex and the other are the same mutex.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":32655,"byte_end":32713,"line_start":25,"line_end":25,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":32718,"byte_end":32721,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ If `is` returns true, the two references point to the same","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":32726,"byte_end":32788,"line_start":27,"line_end":27,"column_start":5,"column_end":67}},{"value":"/ mutex, and they may be used interchangeably.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":32793,"byte_end":32841,"line_start":28,"line_end":28,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":32846,"byte_end":32855,"line_start":29,"line_end":29,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":33138,"byte_end":33142,"line_start":39,"line_end":39,"column_start":12,"column_end":16},"name":"read","qualname":"<RawSharedMutex>::read","value":"pub fn read(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Acquire a shared read lock.","sig":null,"attributes":[{"value":"/ Acquire a shared read lock.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":32964,"byte_end":32995,"line_start":34,"line_end":34,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":33000,"byte_end":33003,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ Blocks until a read lock can be acquired. The lock can be released","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":33008,"byte_end":33078,"line_start":36,"line_end":36,"column_start":5,"column_end":75}},{"value":"/ by calling `unlock_read`.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":33083,"byte_end":33112,"line_start":37,"line_end":37,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":33117,"byte_end":33126,"line_start":38,"line_end":38,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":34058,"byte_end":34066,"line_start":64,"line_end":64,"column_start":12,"column_end":20},"name":"try_read","qualname":"<RawSharedMutex>::try_read","value":"pub fn try_read(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempt to acquire a shared read lock without blocking.","sig":null,"attributes":[{"value":"/ Attempt to acquire a shared read lock without blocking.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":33875,"byte_end":33934,"line_start":60,"line_end":60,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":33939,"byte_end":33942,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ Returns true if we succeeded and false if acquiring a read lock would","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":33947,"byte_end":34020,"line_start":62,"line_end":62,"column_start":5,"column_end":78}},{"value":"/ require blocking.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":34025,"byte_end":34046,"line_start":63,"line_end":63,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":34691,"byte_end":34696,"line_start":84,"line_end":84,"column_start":12,"column_end":17},"name":"write","qualname":"<RawSharedMutex>::write","value":"pub fn write(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Acquire an exclusive write lock.","sig":null,"attributes":[{"value":"/ Acquire an exclusive write lock.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":34508,"byte_end":34544,"line_start":79,"line_end":79,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":34549,"byte_end":34552,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ Blocks until the write lock can be acquired. The lock can be released","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":34557,"byte_end":34630,"line_start":81,"line_end":81,"column_start":5,"column_end":78}},{"value":"/ by calling `unlock_write`.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":34635,"byte_end":34665,"line_start":82,"line_end":82,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":34670,"byte_end":34679,"line_start":83,"line_end":83,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":36156,"byte_end":36165,"line_start":121,"line_end":121,"column_start":12,"column_end":21},"name":"try_write","qualname":"<RawSharedMutex>::try_write","value":"pub fn try_write(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempt to acquire an exclusive write lock without blocking.","sig":null,"attributes":[{"value":"/ Attempt to acquire an exclusive write lock without blocking.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":35965,"byte_end":36029,"line_start":117,"line_end":117,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":36034,"byte_end":36037,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ Returns true if we succeeded and false if acquiring the write lock would","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":36042,"byte_end":36118,"line_start":119,"line_end":119,"column_start":5,"column_end":81}},{"value":"/ require blocking.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":36123,"byte_end":36144,"line_start":120,"line_end":120,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":36759,"byte_end":36770,"line_start":140,"line_end":140,"column_start":12,"column_end":23},"name":"unlock_read","qualname":"<RawSharedMutex>::unlock_read","value":"pub fn unlock_read(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlock a previously acquired read lock.","sig":null,"attributes":[{"value":"/ Unlock a previously acquired read lock.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":36555,"byte_end":36598,"line_start":135,"line_end":135,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":36603,"byte_end":36606,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ Behavior is unspecified (but not undefined) if `unlock_read` is called","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":36611,"byte_end":36685,"line_start":137,"line_end":137,"column_start":5,"column_end":79}},{"value":"/ without a previous accompanying `read`.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":36690,"byte_end":36733,"line_start":138,"line_end":138,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":36738,"byte_end":36747,"line_start":139,"line_end":139,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":37790,"byte_end":37802,"line_start":172,"line_end":172,"column_start":12,"column_end":24},"name":"unlock_write","qualname":"<RawSharedMutex>::unlock_write","value":"pub fn unlock_write(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlock a previously acquired write lock.","sig":null,"attributes":[{"value":"/ Unlock a previously acquired write lock.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":37583,"byte_end":37627,"line_start":167,"line_end":167,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":37632,"byte_end":37635,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ Behavior is unspecified (but not undefined) if `unlock_write` is called","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":37640,"byte_end":37715,"line_start":169,"line_end":169,"column_start":5,"column_end":80}},{"value":"/ without a previous accompanying `write`.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":37720,"byte_end":37764,"line_start":170,"line_end":170,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":37769,"byte_end":37778,"line_start":171,"line_end":171,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":38409,"byte_end":38432,"line_start":194,"line_end":194,"column_start":12,"column_end":35},"name":"wait_from_read_to_write","qualname":"<RawSharedMutex>::wait_from_read_to_write","value":"pub fn wait_from_read_to_write(&Self, &Condvar)","parent":null,"children":[],"decl_id":null,"docs":" Wait on the given condition variable, resuming with a write lock.","sig":null,"attributes":[{"value":"/ Wait on the given condition variable, resuming with a write lock.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":38228,"byte_end":38297,"line_start":190,"line_end":190,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":38302,"byte_end":38305,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ Behavior is unspecified if there was no previous accompanying `read`.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":38310,"byte_end":38383,"line_start":192,"line_end":192,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":38388,"byte_end":38397,"line_start":193,"line_end":193,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":38797,"byte_end":38819,"line_start":204,"line_end":204,"column_start":12,"column_end":34},"name":"wait_from_read_to_read","qualname":"<RawSharedMutex>::wait_from_read_to_read","value":"pub fn wait_from_read_to_read(&Self, &Condvar)","parent":null,"children":[],"decl_id":null,"docs":" Wait on the given condition variable, resuming with another read lock.","sig":null,"attributes":[{"value":"/ Wait on the given condition variable, resuming with another read lock.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":38611,"byte_end":38685,"line_start":200,"line_end":200,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":38690,"byte_end":38693,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ Behavior is unspecified if there was no previous accompanying `read`.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":38698,"byte_end":38771,"line_start":202,"line_end":202,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":38776,"byte_end":38785,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":39178,"byte_end":39201,"line_start":214,"line_end":214,"column_start":12,"column_end":35},"name":"wait_from_write_to_read","qualname":"<RawSharedMutex>::wait_from_write_to_read","value":"pub fn wait_from_write_to_read(&Self, &Condvar)","parent":null,"children":[],"decl_id":null,"docs":" Wait on the given condition variable, resuming with a read lock.","sig":null,"attributes":[{"value":"/ Wait on the given condition variable, resuming with a read lock.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":38997,"byte_end":39065,"line_start":210,"line_end":210,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":39070,"byte_end":39073,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ Behavior is unspecified if there was no previous accompanying `write`.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":39078,"byte_end":39152,"line_start":212,"line_end":212,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":39157,"byte_end":39166,"line_start":213,"line_end":213,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":39568,"byte_end":39592,"line_start":224,"line_end":224,"column_start":12,"column_end":36},"name":"wait_from_write_to_write","qualname":"<RawSharedMutex>::wait_from_write_to_write","value":"pub fn wait_from_write_to_write(&Self, &Condvar)","parent":null,"children":[],"decl_id":null,"docs":" Wait on the given condition variable, resuming with another write lock.","sig":null,"attributes":[{"value":"/ Wait on the given condition variable, resuming with another write lock.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":39380,"byte_end":39455,"line_start":220,"line_end":220,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":39460,"byte_end":39463,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ Behavior is unspecified if there was no previous accompanying `write`.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":39468,"byte_end":39542,"line_start":222,"line_end":222,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":39547,"byte_end":39556,"line_start":223,"line_end":223,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":250},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":846,"byte_end":857,"line_start":31,"line_end":31,"column_start":12,"column_end":23},"name":"SharedMutex","qualname":"::SharedMutex","value":"SharedMutex {  }","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":253}],"decl_id":null,"docs":" A lock providing both shared read locks and exclusive write locks.","sig":null,"attributes":[{"value":"/ A lock providing both shared read locks and exclusive write locks.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":448,"byte_end":518,"line_start":24,"line_end":24,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":519,"byte_end":522,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Similar to `std::sync::RwLock`, except that its guards (`SharedMutexReadGuard` and","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":523,"byte_end":609,"line_start":26,"line_end":26,"column_start":1,"column_end":87}},{"value":"/ `SharedMutexWriteGuard`) can wait on `std::sync::Condvar`s, which is very","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":610,"byte_end":687,"line_start":27,"line_end":27,"column_start":1,"column_end":78}},{"value":"/ useful for implementing efficient concurrent programs.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":688,"byte_end":746,"line_start":28,"line_end":28,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":747,"byte_end":750,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ Another difference from `std::sync::RwLock` is that the guard types are `Send`.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":751,"byte_end":834,"line_start":30,"line_end":30,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":1157,"byte_end":1160,"line_start":42,"line_end":42,"column_start":12,"column_end":15},"name":"new","qualname":"<SharedMutex<T>>::new","value":"pub fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new SharedMutex protecting the given value.\n","sig":null,"attributes":[{"value":"/ Create a new SharedMutex protecting the given value.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":1075,"byte_end":1131,"line_start":40,"line_end":40,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":1136,"byte_end":1145,"line_start":41,"line_end":41,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":1462,"byte_end":1472,"line_start":53,"line_end":53,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<SharedMutex<T>>::into_inner","value":"pub fn into_inner(Self) -> LockResult<T>","parent":null,"children":[],"decl_id":null,"docs":" Extract the data from the lock and destroy the lock.","sig":null,"attributes":[{"value":"/ Extract the data from the lock and destroy the lock.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":1318,"byte_end":1374,"line_start":49,"line_end":49,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":1379,"byte_end":1382,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ Safe since it requires ownership of the lock.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":1387,"byte_end":1436,"line_start":51,"line_end":51,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":1441,"byte_end":1450,"line_start":52,"line_end":52,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":1673,"byte_end":1678,"line_start":61,"line_end":61,"column_start":12,"column_end":17},"name":"write","qualname":"<SharedMutex<T>>::write","value":"pub fn write(&Self) -> LockResult<SharedMutexWriteGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Acquire an exclusive Write lock on the data.\n","sig":null,"attributes":[{"value":"/ Acquire an exclusive Write lock on the data.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":1599,"byte_end":1647,"line_start":59,"line_end":59,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":1652,"byte_end":1661,"line_start":60,"line_end":60,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":1886,"byte_end":1890,"line_start":68,"line_end":68,"column_start":12,"column_end":16},"name":"read","qualname":"<SharedMutex<T>>::read","value":"pub fn read(&Self) -> LockResult<SharedMutexReadGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Acquire a shared Read lock on the data.\n","sig":null,"attributes":[{"value":"/ Acquire a shared Read lock on the data.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":1817,"byte_end":1860,"line_start":66,"line_end":66,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":1865,"byte_end":1874,"line_start":67,"line_end":67,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":2193,"byte_end":2201,"line_start":77,"line_end":77,"column_start":12,"column_end":20},"name":"try_read","qualname":"<SharedMutex<T>>::try_read","value":"pub fn try_read(&Self) -> TryLockResult<SharedMutexReadGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to acquire a shared Read lock on the data.","sig":null,"attributes":[{"value":"/ Attempt to acquire a shared Read lock on the data.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":2026,"byte_end":2080,"line_start":73,"line_end":73,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":2085,"byte_end":2088,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ If acquiring the lock would block, returns `TryLockError::WouldBlock`.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":2093,"byte_end":2167,"line_start":75,"line_end":75,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":2172,"byte_end":2181,"line_start":76,"line_end":76,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":2603,"byte_end":2612,"line_start":89,"line_end":89,"column_start":12,"column_end":21},"name":"try_write","qualname":"<SharedMutex<T>>::try_write","value":"pub fn try_write(&Self) -> TryLockResult<SharedMutexWriteGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to acquire an exclusive Write lock on the data.","sig":null,"attributes":[{"value":"/ Attempt to acquire an exclusive Write lock on the data.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":2431,"byte_end":2490,"line_start":85,"line_end":85,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":2495,"byte_end":2498,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ If acquiring the lock would block, returns `TryLockError::WouldBlock`.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":2503,"byte_end":2577,"line_start":87,"line_end":87,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":2582,"byte_end":2591,"line_start":88,"line_end":88,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":3003,"byte_end":3010,"line_start":101,"line_end":101,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<SharedMutex<T>>::get_mut","value":"pub fn get_mut(&mut Self) -> LockResult<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the data without locking.","sig":null,"attributes":[{"value":"/ Get a mutable reference to the data without locking.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":2845,"byte_end":2901,"line_start":97,"line_end":97,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":2906,"byte_end":2909,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ Safe since it requires exclusive access to the lock itself.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":2914,"byte_end":2977,"line_start":99,"line_end":99,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":2982,"byte_end":2991,"line_start":100,"line_end":100,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":270},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":3242,"byte_end":3262,"line_start":108,"line_end":108,"column_start":12,"column_end":32},"name":"SharedMutexReadGuard","qualname":"::SharedMutexReadGuard","value":"SharedMutexReadGuard {  }","parent":null,"children":[{"krate":0,"index":273},{"krate":0,"index":274}],"decl_id":null,"docs":" A shared read guard on a SharedMutex.\n","sig":null,"attributes":[{"value":"/ A shared read guard on a SharedMutex.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":3189,"byte_end":3230,"line_start":107,"line_end":107,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":281},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":3574,"byte_end":3595,"line_start":117,"line_end":117,"column_start":12,"column_end":33},"name":"SharedMutexWriteGuard","qualname":"::SharedMutexWriteGuard","value":"SharedMutexWriteGuard {  }","parent":null,"children":[{"krate":0,"index":284},{"krate":0,"index":285}],"decl_id":null,"docs":" An exclusive write guard on a SharedMutex.\n","sig":null,"attributes":[{"value":"/ An exclusive write guard on a SharedMutex.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":3516,"byte_end":3562,"line_start":116,"line_end":116,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":5038,"byte_end":5049,"line_start":169,"line_end":169,"column_start":12,"column_end":23},"name":"into_mapped","qualname":"<SharedMutexReadGuard>::into_mapped","value":"pub fn into_mapped(Self) -> MappedSharedMutexReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Turn this guard into a guard which can be mapped to a sub-borrow.","sig":null,"attributes":[{"value":"/ Turn this guard into a guard which can be mapped to a sub-borrow.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":4888,"byte_end":4957,"line_start":166,"line_end":166,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":4962,"byte_end":4965,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ Note that a mapped guard cannot wait on a `Condvar`.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":4970,"byte_end":5026,"line_start":168,"line_end":168,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":5483,"byte_end":5497,"line_start":184,"line_end":184,"column_start":12,"column_end":26},"name":"wait_for_write","qualname":"<SharedMutexReadGuard>::wait_for_write","value":"pub fn wait_for_write(Self, &Condvar) -> LockResult<SharedMutexWriteGuard>","parent":null,"children":[],"decl_id":null,"docs":" Wait on the given condition variable, and resume with a write lock.","sig":null,"attributes":[{"value":"/ Wait on the given condition variable, and resume with a write lock.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":5309,"byte_end":5380,"line_start":181,"line_end":181,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":5385,"byte_end":5388,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ See the documentation for `std::sync::Condvar::wait` for more information.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":5393,"byte_end":5471,"line_start":183,"line_end":183,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":5961,"byte_end":5974,"line_start":198,"line_end":198,"column_start":12,"column_end":25},"name":"wait_for_read","qualname":"<SharedMutexReadGuard>::wait_for_read","value":"pub fn wait_for_read(Self, &Condvar) -> LockResult<Self>","parent":null,"children":[],"decl_id":null,"docs":" Wait on the given condition variable, and resume with another read lock.","sig":null,"attributes":[{"value":"/ Wait on the given condition variable, and resume with another read lock.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":5782,"byte_end":5858,"line_start":195,"line_end":195,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":5863,"byte_end":5866,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ See the documentation for `std::sync::Condvar::wait` for more information.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":5871,"byte_end":5949,"line_start":197,"line_end":197,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":6440,"byte_end":6451,"line_start":214,"line_end":214,"column_start":12,"column_end":23},"name":"into_mapped","qualname":"<SharedMutexWriteGuard>::into_mapped","value":"pub fn into_mapped(Self) -> MappedSharedMutexWriteGuard","parent":null,"children":[],"decl_id":null,"docs":" Turn this guard into a guard which can be mapped to a sub-borrow.","sig":null,"attributes":[{"value":"/ Turn this guard into a guard which can be mapped to a sub-borrow.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":6290,"byte_end":6359,"line_start":211,"line_end":211,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":6364,"byte_end":6367,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ Note that a mapped guard cannot wait on a `Condvar`.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":6372,"byte_end":6428,"line_start":213,"line_end":213,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":6908,"byte_end":6922,"line_start":228,"line_end":228,"column_start":12,"column_end":26},"name":"wait_for_write","qualname":"<SharedMutexWriteGuard>::wait_for_write","value":"pub fn wait_for_write(Self, &Condvar) -> LockResult<Self>","parent":null,"children":[],"decl_id":null,"docs":" Wait on the given condition variable, and resume with another write lock.\n","sig":null,"attributes":[{"value":"/ Wait on the given condition variable, and resume with another write lock.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":6819,"byte_end":6896,"line_start":227,"line_end":227,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":7262,"byte_end":7275,"line_start":240,"line_end":240,"column_start":12,"column_end":25},"name":"wait_for_read","qualname":"<SharedMutexWriteGuard>::wait_for_read","value":"pub fn wait_for_read(Self, &Condvar) -> LockResult<SharedMutexReadGuard>","parent":null,"children":[],"decl_id":null,"docs":" Wait on the given condition variable, and resume with a read lock.\n","sig":null,"attributes":[{"value":"/ Wait on the given condition variable, and resume with a read lock.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":7180,"byte_end":7250,"line_start":239,"line_end":239,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":330},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":8002,"byte_end":8028,"line_start":266,"line_end":266,"column_start":12,"column_end":38},"name":"MappedSharedMutexReadGuard","qualname":"::MappedSharedMutexReadGuard","value":"MappedSharedMutexReadGuard {  }","parent":null,"children":[{"krate":0,"index":333},{"krate":0,"index":334}],"decl_id":null,"docs":" A read guard to a sub-borrow of an original SharedMutexReadGuard.","sig":null,"attributes":[{"value":"/ A read guard to a sub-borrow of an original SharedMutexReadGuard.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":7838,"byte_end":7907,"line_start":262,"line_end":262,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":7908,"byte_end":7911,"line_start":263,"line_end":263,"column_start":1,"column_end":4}},{"value":"/ Unlike SharedMutexReadGuard, it cannot be used to wait on a","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":7912,"byte_end":7975,"line_start":264,"line_end":264,"column_start":1,"column_end":64}},{"value":"/ `Condvar`.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":7976,"byte_end":7990,"line_start":265,"line_end":265,"column_start":1,"column_end":15}}]},{"kind":"Struct","id":{"krate":0,"index":335},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":8288,"byte_end":8315,"line_start":275,"line_end":275,"column_start":12,"column_end":39},"name":"MappedSharedMutexWriteGuard","qualname":"::MappedSharedMutexWriteGuard","value":"MappedSharedMutexWriteGuard {  }","parent":null,"children":[{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340}],"decl_id":null,"docs":" A write guard to a sub-borrow of an original `SharedMutexWriteGuard`.","sig":null,"attributes":[{"value":"/ A write guard to a sub-borrow of an original `SharedMutexWriteGuard`.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":8117,"byte_end":8190,"line_start":271,"line_end":271,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":8191,"byte_end":8194,"line_start":272,"line_end":272,"column_start":1,"column_end":4}},{"value":"/ Unlike `SharedMutexWriteGuard`, it cannot be used to wait on a","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":8195,"byte_end":8261,"line_start":273,"line_end":273,"column_start":1,"column_end":67}},{"value":"/ `Condvar`.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":8262,"byte_end":8276,"line_start":274,"line_end":274,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":8603,"byte_end":8606,"line_start":284,"line_end":284,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedSharedMutexReadGuard>::map","value":"pub fn map<U, F>(Self, F) -> MappedSharedMutexReadGuard where F: FnOnce(&T) ->\n&U","parent":null,"children":[],"decl_id":null,"docs":" Transform this guard into a sub-borrow of the original data.\n","sig":null,"attributes":[{"value":"/ Transform this guard into a sub-borrow of the original data.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":8513,"byte_end":8577,"line_start":282,"line_end":282,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":8582,"byte_end":8591,"line_start":283,"line_end":283,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":8877,"byte_end":8887,"line_start":291,"line_end":291,"column_start":12,"column_end":22},"name":"option_map","qualname":"<MappedSharedMutexReadGuard>::option_map","value":"pub fn option_map<U, F>(Self, F) -> Option<MappedSharedMutexReadGuard> where\nF: FnOnce(&T) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Conditionally transform this guard into a sub-borrow of the original data.\n","sig":null,"attributes":[{"value":"/ Conditionally transform this guard into a sub-borrow of the original data.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":8773,"byte_end":8851,"line_start":289,"line_end":289,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":8856,"byte_end":8865,"line_start":290,"line_end":290,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":9262,"byte_end":9272,"line_start":300,"line_end":300,"column_start":12,"column_end":22},"name":"result_map","qualname":"<MappedSharedMutexReadGuard>::result_map","value":"pub fn result_map<U, E, F>(Self, F)\n-> Result<MappedSharedMutexReadGuard, (Self, E)> where F: FnOnce(&T) ->\nResult<&U, E>","parent":null,"children":[],"decl_id":null,"docs":" Conditionally transform this guard into a sub-borrow of the original data.","sig":null,"attributes":[{"value":"/ Conditionally transform this guard into a sub-borrow of the original data.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":9070,"byte_end":9148,"line_start":296,"line_end":296,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":9153,"byte_end":9156,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ If the transformation operation is aborted, returns the original guard.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":9161,"byte_end":9236,"line_start":298,"line_end":298,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":9241,"byte_end":9250,"line_start":299,"line_end":299,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":10059,"byte_end":10066,"line_start":325,"line_end":325,"column_start":12,"column_end":19},"name":"recover","qualname":"<MappedSharedMutexReadGuard>::recover","value":"pub fn recover<U: ?Sized>(Self, &'mutex SharedMutex<U>)\n-> Result<SharedMutexReadGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Recover the original guard for waiting.","sig":null,"attributes":[{"value":"/ Recover the original guard for waiting.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":9821,"byte_end":9864,"line_start":320,"line_end":320,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":9869,"byte_end":9872,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ Takes the original mutex to recover the original type and data. If the","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":9877,"byte_end":9951,"line_start":322,"line_end":322,"column_start":5,"column_end":79}},{"value":"/ passed mutex is not the same object as the original mutex, returns `Err`.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":9956,"byte_end":10033,"line_start":323,"line_end":323,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":10038,"byte_end":10047,"line_start":324,"line_end":324,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":10686,"byte_end":10689,"line_start":343,"line_end":343,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedSharedMutexWriteGuard>::map","value":"pub fn map<U, F>(Self, F) -> MappedSharedMutexWriteGuard where\nF: FnOnce(&mut T) -> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Transform this guard into a sub-borrow of the original data.\n","sig":null,"attributes":[{"value":"/ Transform this guard into a sub-borrow of the original data.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":10596,"byte_end":10660,"line_start":341,"line_end":341,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":10665,"byte_end":10674,"line_start":342,"line_end":342,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":365},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":10969,"byte_end":10979,"line_start":350,"line_end":350,"column_start":12,"column_end":22},"name":"option_map","qualname":"<MappedSharedMutexWriteGuard>::option_map","value":"pub fn option_map<U, F>(Self, F) -> Option<MappedSharedMutexWriteGuard> where\nF: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Conditionally transform this guard into a sub-borrow of the original data.\n","sig":null,"attributes":[{"value":"/ Conditionally transform this guard into a sub-borrow of the original data.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":10865,"byte_end":10943,"line_start":348,"line_end":348,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":10948,"byte_end":10957,"line_start":349,"line_end":349,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":11363,"byte_end":11373,"line_start":359,"line_end":359,"column_start":12,"column_end":22},"name":"result_map","qualname":"<MappedSharedMutexWriteGuard>::result_map","value":"pub fn result_map<U, E, F>(Self, F)\n-> Result<MappedSharedMutexWriteGuard, (Self, E)> where F: FnOnce(&mut T) ->\nResult<&mut U, E>","parent":null,"children":[],"decl_id":null,"docs":" Conditionally transform this guard into a sub-borrow of the original data.","sig":null,"attributes":[{"value":"/ Conditionally transform this guard into a sub-borrow of the original data.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":11171,"byte_end":11249,"line_start":355,"line_end":355,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":11254,"byte_end":11257,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ If the transformation operation is aborted, returns the original guard.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":11262,"byte_end":11337,"line_start":357,"line_end":357,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":11342,"byte_end":11351,"line_start":358,"line_end":358,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":12295,"byte_end":12302,"line_start":387,"line_end":387,"column_start":12,"column_end":19},"name":"recover","qualname":"<MappedSharedMutexWriteGuard>::recover","value":"pub fn recover<U: ?Sized>(Self, &'mutex SharedMutex<U>)\n-> Result<SharedMutexWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Recover the original guard for waiting.","sig":null,"attributes":[{"value":"/ Recover the original guard for waiting.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":12057,"byte_end":12100,"line_start":382,"line_end":382,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":12105,"byte_end":12108,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ Takes the original mutex to recover the original type and data. If the","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":12113,"byte_end":12187,"line_start":384,"line_end":384,"column_start":5,"column_end":79}},{"value":"/ passed mutex is not the same object as the original mutex, returns `Err`.","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":12192,"byte_end":12269,"line_start":385,"line_end":385,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":12274,"byte_end":12283,"line_start":386,"line_end":386,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":21108,"byte_end":21114,"line_start":25,"line_end":25,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":21837,"byte_end":21843,"line_start":57,"line_end":57,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":69},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":22801,"byte_end":22812,"line_start":86,"line_end":86,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":23751,"byte_end":23760,"line_start":118,"line_end":118,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":24557,"byte_end":24571,"line_start":151,"line_end":151,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":26305,"byte_end":26312,"line_start":35,"line_end":35,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":26515,"byte_end":26522,"line_start":45,"line_end":45,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":139},{"krate":0,"index":141},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":28026,"byte_end":28042,"line_start":87,"line_end":87,"column_start":25,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":149},{"krate":0,"index":151},{"krate":0,"index":153},{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":29067,"byte_end":29084,"line_start":117,"line_end":117,"column_start":25,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":30124,"byte_end":30140,"line_start":147,"line_end":147,"column_start":35,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":167},{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":30296,"byte_end":30313,"line_start":153,"line_end":153,"column_start":35,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":30473,"byte_end":30490,"line_start":159,"line_end":159,"column_start":38,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":30643,"byte_end":30660,"line_start":163,"line_end":163,"column_start":68,"column_end":85},"value":"","parent":null,"children":[{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":30812,"byte_end":30828,"line_start":167,"line_end":167,"column_start":67,"column_end":83},"value":"","parent":null,"children":[{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":30955,"byte_end":30962,"line_start":171,"line_end":171,"column_start":43,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":31069,"byte_end":31076,"line_start":175,"line_end":175,"column_start":43,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":31186,"byte_end":31193,"line_start":179,"line_end":179,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":31297,"byte_end":31304,"line_start":183,"line_end":183,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":31528,"byte_end":31544,"line_start":191,"line_end":191,"column_start":53,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":201}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":31783,"byte_end":31800,"line_start":199,"line_end":199,"column_start":53,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":205}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":32390,"byte_end":32404,"line_start":14,"line_end":14,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":40512,"byte_end":40517,"line_start":260,"line_end":260,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":970,"byte_end":981,"line_start":36,"line_end":36,"column_start":40,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":1027,"byte_end":1038,"line_start":37,"line_end":37,"column_start":40,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":1054,"byte_end":1065,"line_start":39,"line_end":39,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":260},{"krate":0,"index":261}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":1578,"byte_end":1589,"line_start":58,"line_end":58,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":3398,"byte_end":3418,"line_start":113,"line_end":113,"column_start":48,"column_end":68},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":3480,"byte_end":3500,"line_start":114,"line_end":114,"column_start":48,"column_end":68},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":3731,"byte_end":3751,"line_start":122,"line_end":122,"column_start":35,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":289},{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":3878,"byte_end":3899,"line_start":129,"line_end":129,"column_start":35,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":4035,"byte_end":4056,"line_start":136,"line_end":136,"column_start":38,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":299}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":4173,"byte_end":4193,"line_start":141,"line_end":141,"column_start":25,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":303}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":4506,"byte_end":4527,"line_start":153,"line_end":153,"column_start":25,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":4850,"byte_end":4870,"line_start":165,"line_end":165,"column_start":25,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":6251,"byte_end":6272,"line_start":210,"line_end":210,"column_start":25,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":7589,"byte_end":7609,"line_start":252,"line_end":252,"column_start":34,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":7729,"byte_end":7750,"line_start":257,"line_end":257,"column_start":34,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":329}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":8469,"byte_end":8495,"line_start":281,"line_end":281,"column_start":25,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":344},{"krate":0,"index":348},{"krate":0,"index":352},{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":10551,"byte_end":10578,"line_start":340,"line_end":340,"column_start":25,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":361},{"krate":0,"index":365},{"krate":0,"index":369},{"krate":0,"index":373}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":12799,"byte_end":12825,"line_start":402,"line_end":402,"column_start":35,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":378},{"krate":0,"index":379}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":12952,"byte_end":12979,"line_start":409,"line_end":409,"column_start":35,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":383},{"krate":0,"index":384}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":13109,"byte_end":13136,"line_start":416,"line_end":416,"column_start":38,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":13252,"byte_end":13278,"line_start":421,"line_end":421,"column_start":34,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":13394,"byte_end":13421,"line_start":426,"line_end":426,"column_start":34,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":396}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":13549,"byte_end":13560,"line_start":431,"line_end":431,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":399}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":14013,"byte_end":14033,"line_start":443,"line_end":443,"column_start":53,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":403}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":14271,"byte_end":14292,"line_start":451,"line_end":451,"column_start":53,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":407}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":14531,"byte_end":14557,"line_start":459,"line_end":459,"column_start":53,"column_end":79},"value":"","parent":null,"children":[{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":14801,"byte_end":14828,"line_start":467,"line_end":467,"column_start":53,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":415}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":413,"byte_end":419,"line_start":20,"line_end":20,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":49}},{"kind":"Mod","span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":429,"byte_end":436,"line_start":21,"line_end":21,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":89}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":21108,"byte_end":21114,"line_start":25,"line_end":25,"column_start":9,"column_end":15},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":416},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":21837,"byte_end":21843,"line_start":57,"line_end":57,"column_start":17,"column_end":23},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":416},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":22801,"byte_end":22812,"line_start":86,"line_end":86,"column_start":26,"column_end":37},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":423},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":23751,"byte_end":23760,"line_start":118,"line_end":118,"column_start":6,"column_end":15},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":432},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\poison.rs","byte_start":24557,"byte_end":24571,"line_start":151,"line_end":151,"column_start":24,"column_end":38},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":436},"to":{"krate":2,"index":3300}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":26305,"byte_end":26312,"line_start":35,"line_end":35,"column_start":9,"column_end":16},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":120},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":26515,"byte_end":26522,"line_start":45,"line_end":45,"column_start":17,"column_end":24},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":120},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":28026,"byte_end":28042,"line_start":87,"line_end":87,"column_start":25,"column_end":41},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":124},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":29067,"byte_end":29084,"line_start":117,"line_end":117,"column_start":25,"column_end":42},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":129},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":30124,"byte_end":30140,"line_start":147,"line_end":147,"column_start":35,"column_end":51},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":124},"to":{"krate":2,"index":3276}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":30296,"byte_end":30313,"line_start":153,"line_end":153,"column_start":35,"column_end":52},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":129},"to":{"krate":2,"index":3276}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":30473,"byte_end":30490,"line_start":159,"line_end":159,"column_start":38,"column_end":55},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":129},"to":{"krate":2,"index":3289}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":30643,"byte_end":30660,"line_start":163,"line_end":163,"column_start":68,"column_end":85},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":129},"to":{"krate":2,"index":2960}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":30812,"byte_end":30828,"line_start":167,"line_end":167,"column_start":67,"column_end":83},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":124},"to":{"krate":2,"index":2960}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":30955,"byte_end":30962,"line_start":171,"line_end":171,"column_start":43,"column_end":50},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":120},"to":{"krate":2,"index":2954}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":31069,"byte_end":31076,"line_start":175,"line_end":175,"column_start":43,"column_end":50},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":120},"to":{"krate":2,"index":2957}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":31186,"byte_end":31193,"line_start":179,"line_end":179,"column_start":34,"column_end":41},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":120},"to":{"krate":2,"index":2960}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":31297,"byte_end":31304,"line_start":183,"line_end":183,"column_start":45,"column_end":52},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":120},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":31528,"byte_end":31544,"line_start":191,"line_end":191,"column_start":53,"column_end":69},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":124},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\monitor.rs","byte_start":31783,"byte_end":31800,"line_start":199,"line_end":199,"column_start":53,"column_end":70},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":129},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":32390,"byte_end":32404,"line_start":14,"line_end":14,"column_start":6,"column_end":20},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":217},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\raw.rs","byte_start":40512,"byte_end":40517,"line_start":260,"line_end":260,"column_start":6,"column_end":11},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":443},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":970,"byte_end":981,"line_start":36,"line_end":36,"column_start":40,"column_end":51},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":250},"to":{"krate":2,"index":3057}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":1027,"byte_end":1038,"line_start":37,"line_end":37,"column_start":40,"column_end":51},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":250},"to":{"krate":2,"index":3069}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":1054,"byte_end":1065,"line_start":39,"line_end":39,"column_start":9,"column_end":20},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":250},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":1578,"byte_end":1589,"line_start":58,"line_end":58,"column_start":17,"column_end":28},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":250},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":3398,"byte_end":3418,"line_start":113,"line_end":113,"column_start":48,"column_end":68},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":270},"to":{"krate":2,"index":3057}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":3480,"byte_end":3500,"line_start":114,"line_end":114,"column_start":48,"column_end":68},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":270},"to":{"krate":2,"index":3069}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":3731,"byte_end":3751,"line_start":122,"line_end":122,"column_start":35,"column_end":55},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":270},"to":{"krate":2,"index":3276}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":3878,"byte_end":3899,"line_start":129,"line_end":129,"column_start":35,"column_end":56},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":281},"to":{"krate":2,"index":3276}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":4035,"byte_end":4056,"line_start":136,"line_end":136,"column_start":38,"column_end":59},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":281},"to":{"krate":2,"index":3289}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":4173,"byte_end":4193,"line_start":141,"line_end":141,"column_start":25,"column_end":45},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":270},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":4506,"byte_end":4527,"line_start":153,"line_end":153,"column_start":25,"column_end":46},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":281},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":4850,"byte_end":4870,"line_start":165,"line_end":165,"column_start":25,"column_end":45},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":270},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":6251,"byte_end":6272,"line_start":210,"line_end":210,"column_start":25,"column_end":46},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":281},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":7589,"byte_end":7609,"line_start":252,"line_end":252,"column_start":34,"column_end":54},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":270},"to":{"krate":2,"index":3300}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":7729,"byte_end":7750,"line_start":257,"line_end":257,"column_start":34,"column_end":55},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":281},"to":{"krate":2,"index":3300}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":8469,"byte_end":8495,"line_start":281,"line_end":281,"column_start":25,"column_end":51},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":330},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":10551,"byte_end":10578,"line_start":340,"line_end":340,"column_start":25,"column_end":52},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":335},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":12799,"byte_end":12825,"line_start":402,"line_end":402,"column_start":35,"column_end":61},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":330},"to":{"krate":2,"index":3276}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":12952,"byte_end":12979,"line_start":409,"line_end":409,"column_start":35,"column_end":62},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":335},"to":{"krate":2,"index":3276}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":13109,"byte_end":13136,"line_start":416,"line_end":416,"column_start":38,"column_end":65},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":335},"to":{"krate":2,"index":3289}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":13252,"byte_end":13278,"line_start":421,"line_end":421,"column_start":34,"column_end":60},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":330},"to":{"krate":2,"index":3300}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":13394,"byte_end":13421,"line_start":426,"line_end":426,"column_start":34,"column_end":61},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":335},"to":{"krate":2,"index":3300}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":13549,"byte_end":13560,"line_start":431,"line_end":431,"column_start":45,"column_end":56},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":250},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":14013,"byte_end":14033,"line_start":443,"line_end":443,"column_start":53,"column_end":73},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":270},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":14271,"byte_end":14292,"line_start":451,"line_end":451,"column_start":53,"column_end":74},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":281},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":14531,"byte_end":14557,"line_start":459,"line_end":459,"column_start":53,"column_end":79},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":330},"to":{"krate":2,"index":9685}},{"span":{"file_name":"C:\\Users\\domen\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\shared-mutex-0.2.3\\src\\lib.rs","byte_start":14801,"byte_end":14828,"line_start":467,"line_end":467,"column_start":53,"column_end":80},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":335},"to":{"krate":2,"index":9685}}]}